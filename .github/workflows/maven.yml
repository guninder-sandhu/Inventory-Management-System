# This workflow builds Java microservices in a multi-module Maven project.
# It uses paths to trigger builds only for changed microservices and builds affected modules using Maven's -pl flag.
# For more information, see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ "dev" ]
    paths:
      - 'Inventory-Management-System/apigateway-service/**'
      - 'Inventory-Management-System/product/**'
      - 'Inventory-Management-System/service-registry/**'
      - 'Inventory-Management-System/stock-service/**'
      - 'Inventory-Management-System/user-service/**'
      - 'Inventory-Management-System/pom.xml'  # Include root pom.xml for changes affecting all modules
      - '.github/workflows/**'
  pull_request:
    branches: [ "dev" ]
    paths:
      - 'Inventory-Management-System/apigateway-service/**'
      - 'Inventory-Management-System/product/**'
      - 'Inventory-Management-System/service-registry/**'
      - 'Inventory-Management-System/stock-service/**'
      - 'Inventory-Management-System/user-service/**'
      - 'Inventory-Management-System/pom.xml'  # Include root pom.xml for changes affecting all modules
      - '.github/workflows/**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history to analyze changes

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Identify changed modules
      run: |
        echo "Changed files:"
        git diff --name-only ${{ github.event.before }} ${{ github.sha }} > changed_files.txt
        cat changed_files.txt
        # Map changed files to their respective modules
        echo "Affected modules:" > affected_modules.txt
        while IFS= read -r file; do
          if [[ "$file" == Inventory-Management-System/pom.xml ]]; then
            # If root pom.xml changed, build all modules
            echo "apigateway-service,product,service-registry,stock-service,user-service" >> affected_modules.txt
            break
          elif [[ "$file" == Inventory-Management-System/apigateway-service/* ]]; then
            echo -n "apigateway-service," >> affected_modules.txt
          elif [[ "$file" == Inventory-Management-System/product/* ]]; then
            echo -n "product," >> affected_modules.txt
          elif [[ "$file" == Inventory-Management-System/service-registry/* ]]; then
            echo -n "service-registry," >> affected_modules.txt
          elif [[ "$file" == Inventory-Management-System/stock-service/* ]]; then
            echo -n "stock-service," >> affected_modules.txt
          elif [[ "$file" == Inventory-Management-System/user-service/* ]]; then
            echo -n "user-service," >> affected_modules.txt
          fi
        done < changed_files.txt
        # Remove trailing comma and deduplicate
        modules=$(cat affected_modules.txt | tr -d '\n' | sed 's/,$//' | tr ',' '\n' | sort -u | tr '\n' ',' | sed 's/,$//')
        echo "modules=$modules" >> $GITHUB_ENV
        echo "Affected modules: $modules"

    - name: Build affected modules
      run: |
        if [[ -z "${{ env.modules }}" ]]; then
          echo "No modules affected. Skipping build."
          exit 0
        fi
        cd Inventory-Management-System || exit
        mvn -B package -pl ${{ env.modules }} -am --file pom.xml
        cd - || exit

    # Optional: Submit dependency graphs for the entire project
    - name: Submit dependency graphs to GitHub
      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
      with:
        directory: Inventory-Management-System
      if: github.event_name == 'push' && env.modules != ''
      continue-on-error: true
